"use client";

import { useState, useEffect, useMemo, useCallback, useRef } from "react";
import { useAuth } from "@/components/auth/AuthProvider";
import { useProperty } from "@/lib/hooks/useProperty";
import { supabase } from "@/lib/supabase";
import StandardPageLayout from "@/components/layout/StandardPageLayout";
import StandardCard from "@/components/ui/StandardCard";
import { PropertyGuard } from "@/components/ui/PropertyGuard";
import Link from "next/link";
import {
  CheckCircle,
  Clock,
  AlertCircle,
  Plus,
  Calendar,
  Users,
  Sparkles,
  ArrowRight,
  RefreshCw,
  Building,
} from "lucide-react";

interface CleaningStats {
  totalTasks: number;
  completedTasks: number;
  pendingTasks: number;
  overdueTasks: number;
}

export default function CleaningPage() {
  const { user, loading: authLoading } = useAuth();
  const { currentProperty, loading: propertyLoading } = useProperty();
  const [stats, setStats] = useState<CleaningStats>({
    totalTasks: 0,
    completedTasks: 0,
    pendingTasks: 0,
    overdueTasks: 0,
  });
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);

  // Refs to prevent multiple fetches and track component mount
  const fetchingRef = useRef(false);
  const hasFetchedRef = useRef<string | null>(null);
  const mountedRef = useRef(true);

  // Memoize loading states
  const isInitializing = useMemo(() => {
    return authLoading || propertyLoading;
  }, [authLoading, propertyLoading]);

  // Component cleanup
  useEffect(() => {
    mountedRef.current = true;
    return () => {
      mountedRef.current = false;
    };
  }, []);

  // Optimized stats loading function
  const loadCleaningStats = useCallback(
    async (property_id: string, showRefreshFeedback = false) => {
      // Prevent duplicate fetches
      if (
        fetchingRef.current ||
        (!showRefreshFeedback && hasFetchedRef.current === property_id)
      ) {
        return;
      }

      fetchingRef.current = true;
      hasFetchedRef.current = property_id;

      try {
        console.log("üßΩ Loading cleaning stats for property:", property_id);

        if (showRefreshFeedback) {
          setRefreshing(true);
        } else {
          setLoading(true);
        }

        // TODO: Replace with real API call when ready
        // For now, simulate API delay and return mock data
        await new Promise((resolve) => setTimeout(resolve, 500));

        // Mock data - replace with real Supabase query
        const mockStats: CleaningStats = {
          totalTasks: 12,
          completedTasks: 8,
          pendingTasks: 3,
          overdueTasks: 1,
        };

        // Future real implementation:
        /*
      const { data: cleaningTasks, error } = await supabase
        .from("cleaning_tasks")
        .select("status, due_date")
        .eq("property_id", property_id);

      if (error) throw error;

      const now = new Date();
      const stats = {
        totalTasks: cleaningTasks?.length || 0,
        completedTasks: cleaningTasks?.filter(task => task.status === "completed").length || 0,
        pendingTasks: cleaningTasks?.filter(task => task.status === "pending").length || 0,
        overdueTasks: cleaningTasks?.filter(task => 
          task.status !== "completed" && 
          task.due_date && 
          new Date(task.due_date) < now
        ).length || 0,
      };
      */

        if (mountedRef.current) {
          console.log("‚úÖ Cleaning stats loaded:", mockStats);
          setStats(mockStats);
        }
      } catch (error) {
        console.error("‚ùå Error loading cleaning stats:", error);
        if (mountedRef.current) {
          // Reset to default stats on error
          setStats({
            totalTasks: 0,
            completedTasks: 0,
            pendingTasks: 0,
            overdueTasks: 0,
          });
        }
      } finally {
        if (mountedRef.current) {
          setLoading(false);
          setRefreshing(false);
        }
        fetchingRef.current = false;
      }
    },
    []
  );

  // Refresh handler
  const handleRefresh = useCallback(() => {
    if (!refreshing && currentProperty?.id) {
      hasFetchedRef.current = null;
      loadCleaningStats(currentProperty.id, true);
    }
  }, [refreshing, currentProperty?.id, loadCleaningStats]);

  // Single useEffect with proper dependencies
  useEffect(() => {
    if (isInitializing || !currentProperty?.id) {
      if (!isInitializing) {
        setLoading(false);
      }
      return;
    }

    console.log("üè† Property loaded, fetching cleaning stats");
    loadCleaningStats(currentProperty.id);
  }, [currentProperty?.id, isInitializing, loadCleaningStats]);

  // Reset fetch tracking when property changes
  useEffect(() => {
    if (currentProperty?.id !== hasFetchedRef.current) {
      hasFetchedRef.current = null;
      fetchingRef.current = false;
      setLoading(true);
    }
  }, [currentProperty?.id]);

  // Memoized progress calculation
  const progressPercentage = useMemo(() => {
    if (stats.totalTasks === 0) return 0;
    return Math.round((stats.completedTasks / stats.totalTasks) * 100);
  }, [stats.totalTasks, stats.completedTasks]);

  // Memoized stat cards data
  const statCards = useMemo(
    () => [
      {
        title: "Total Tasks",
        value: stats.totalTasks,
        icon: CheckCircle,
        color: "blue",
        bgColor: "bg-blue-50 dark:bg-blue-900/20",
        borderColor: "border-blue-200 dark:border-blue-800",
        iconBg: "bg-blue-100 dark:bg-blue-800",
        iconColor: "text-blue-600 dark:text-blue-400",
        textColor: "text-blue-900 dark:text-blue-100",
        valueColor: "text-blue-600 dark:text-blue-400",
      },
      {
        title: "Completed",
        value: stats.completedTasks,
        icon: CheckCircle,
        color: "green",
        bgColor: "bg-green-50 dark:bg-green-900/20",
        borderColor: "border-green-200 dark:border-green-800",
        iconBg: "bg-green-100 dark:bg-green-800",
        iconColor: "text-green-600 dark:text-green-400",
        textColor: "text-green-900 dark:text-green-100",
        valueColor: "text-green-600 dark:text-green-400",
      },
      {
        title: "Pending",
        value: stats.pendingTasks,
        icon: Clock,
        color: "yellow",
        bgColor: "bg-yellow-50 dark:bg-yellow-900/20",
        borderColor: "border-yellow-200 dark:border-yellow-800",
        iconBg: "bg-yellow-100 dark:bg-yellow-800",
        iconColor: "text-yellow-600 dark:text-yellow-400",
        textColor: "text-yellow-900 dark:text-yellow-100",
        valueColor: "text-yellow-600 dark:text-yellow-400",
      },
      {
        title: "Overdue",
        value: stats.overdueTasks,
        icon: AlertCircle,
        color: "red",
        bgColor: "bg-red-50 dark:bg-red-900/20",
        borderColor: "border-red-200 dark:border-red-800",
        iconBg: "bg-red-100 dark:bg-red-800",
        iconColor: "text-red-600 dark:text-red-400",
        textColor: "text-red-900 dark:text-red-100",
        valueColor: "text-red-600 dark:text-red-400",
      },
    ],
    [stats]
  );

  // Loading states
  if (isInitializing) {
    return (
      <StandardPageLayout title="Cleaning" subtitle="Loading...">
        <StandardCard>
          <div className="flex items-center justify-center min-h-[400px]">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-3"></div>
              <p className="text-gray-600">‚è≥ Loading cleaning dashboard...</p>
            </div>
          </div>
        </StandardCard>
      </StandardPageLayout>
    );
  }

  if (!user) {
    return null;
  }

  if (!currentProperty) {
    return (
      <PropertyGuard fallback={<CleaningNoPropertyFallback />}>
        <></>
      </PropertyGuard>
    );
  }

  return (
    <StandardPageLayout
      title="Cleaning"
      subtitle={`Cleaning management for ${currentProperty.name}`}
      breadcrumb={[{ label: "Cleaning" }]}
    >
      <div className="space-y-6">
        {/* Overview Stats Card */}
        <StandardCard
          title="Cleaning Dashboard"
          subtitle={`Track cleaning tasks and progress ‚Ä¢ ${progressPercentage}% complete`}
          headerActions={
            <div className="flex items-center gap-3">
              <button
                onClick={handleRefresh}
                disabled={refreshing}
                className="flex items-center px-3 py-1 text-sm border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 disabled:opacity-50"
                title="Refresh cleaning stats"
              >
                <RefreshCw
                  className={`h-3 w-3 mr-1 ${refreshing ? "animate-spin" : ""}`}
                />
                Refresh
              </button>
              <span className="text-xs text-gray-500">
                {currentProperty.name}
              </span>
            </div>
          }
        >
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span className="ml-2">Loading stats...</span>
            </div>
          ) : (
            <div className="space-y-6">
              {/* Progress Bar */}
              {stats.totalTasks > 0 && (
                <div className="rounded-lg bg-gray-100 dark:bg-gray-800 p-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                      Cleaning Progress
                    </span>
                    <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                      {progressPercentage}%
                    </span>
                  </div>
                  <div className="mt-2 h-2 bg-gray-200 dark:bg-gray-700 rounded-full">
                    <div
                      className="h-2 bg-green-600 rounded-full transition-all duration-300"
                      style={{ width: `${progressPercentage}%` }}
                    />
                  </div>
                </div>
              )}

              {/* Stat Cards Grid */}
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
                {statCards.map((card, index) => (
                  <div
                    key={index}
                    className={`rounded-lg border p-4 flex items-center space-x-4 ${card.bgColor} ${card.borderColor}`}
                  >
                    <div
                      className={`p-3 rounded-full ${card.iconBg}`}
                    >
                      <card.icon className={`h-6 w-6 ${card.iconColor}`} />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className={`text-xs font-semibold ${card.textColor}`}>
                        {card.title}
                      </p>
                      <p className={`text-2xl font-bold ${card.valueColor}`}>
                        {card.value}
                      </p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Action Buttons */}
              <div className="flex flex-col sm:flex-row gap-3">
                <Link
                  href="/cleaning/tasks"
                  className="inline-flex items-center justify-center px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Plus className="w-5 h-5 mr-2" />
                  New Cleaning Task
                </Link>
                <Link
                  href="/cleaning/schedule"
                  className="inline-flex items-center justify-center px-4 py-2 text-sm font-semibold text-gray-700 bg-gray-100 dark:bg-gray-800 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                >
                  <Calendar className="w-5 h-5 mr-2" />
                  View Schedule
                </Link>
                <Link
                  href="/cleaning/history"
                  className="inline-flex items-center justify-center px-4 py-2 text-sm font-semibold text-gray-700 bg-gray-100 dark:bg-gray-800 dark:text-gray-300 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
                >
                  <ArrowRight className="w-5 h-5 mr-2" />
                  View History
                </Link>
              </div>
            </div>
          )}
        </StandardCard>

        {/* Quick Actions Card */}
        <StandardCard
          title="Quick Actions"
          subtitle="Common cleaning management tasks"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <Link
              href="/cleaning/tasks/new"
              className="flex items-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              <Plus className="h-8 w-8 text-blue-600 mr-3 flex-shrink-0" />
              <div>
                <h4 className="font-medium text-gray-900 dark:text-gray-100">
                  Create Task
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Add a new cleaning task
                </p>
              </div>
            </Link>

            <Link
              href="/cleaning/templates"
              className="flex items-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              <Sparkles className="h-8 w-8 text-purple-600 mr-3 flex-shrink-0" />
              <div>
                <h4 className="font-medium text-gray-900 dark:text-gray-100">
                  Templates
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Use cleaning templates
                </p>
              </div>
            </Link>

            <Link
              href="/cleaning/team"
              className="flex items-center p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
            >
              <Users className="h-8 w-8 text-green-600 mr-3 flex-shrink-0" />
              <div>
                <h4 className="font-medium text-gray-900 dark:text-gray-100">
                  Team
                </h4>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Manage cleaning team
                </p>
              </div>
            </Link>
          </div>
        </StandardCard>

        {/* Recent Tasks Table */}
        <StandardCard
          title="Recent Tasks"
          subtitle="Latest cleaning activities"
        >
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
              <thead className="bg-gray-50 dark:bg-gray-800">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    Task
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    Due Date
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    Assigned To
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                {/* TODO: Replace with real data */}
                <tr>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                      Kitchen Deep Clean
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                      Completed
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                    Today
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                    Sarah Johnson
                  </td>
                </tr>
                <tr>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                      Bathroom Sanitization
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200">
                      Overdue
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                    Yesterday
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                    Mike Chen
                  </td>
                </tr>
                <tr>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900 dark:text-gray-100">
                      Living Room Vacuum
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                      Pending
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                    Tomorrow
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                    Unassigned
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </StandardCard>
      </div>
    </StandardPageLayout>
  );
}

// Fallback component for when no property is selected
function CleaningNoPropertyFallback() {
  return (
    <StandardPageLayout title="Cleaning" subtitle="No property selected">
      <StandardCard>
        <div className="text-center py-12">
          <Building className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">
            No Property Selected
          </h3>
          <p className="text-gray-600 mb-6">
            Please select a property to view and manage cleaning tasks.
          </p>
          <div className="space-y-3">
            <button
              onClick={() => (window.location.href = "/properties/new")}
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
            >
              Create New Property
            </button>
            <button
              onClick={() => (window.location.href = "/properties")}
              className="w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              View All Properties
            </button>
          </div>
        </div>
      </StandardCard>
    </StandardPageLayout>
  );
}
