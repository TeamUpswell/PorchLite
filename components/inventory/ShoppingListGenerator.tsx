"use client";

import React, { useState, useMemo } from "react";
import {
  Printer,
  Mail,
  MessageSquare,
  Download,
  Copy,
  Check,
  Calendar,
  MapPin,
} from "lucide-react";

interface ShoppingListItem {
  id: string;
  name: string;
  quantity: number;
  threshold: number;
  status: "good" | "low" | "out";
  category: string;
  unit?: string;
}

interface ShoppingListGeneratorProps {
  items: ShoppingListItem[];
  propertyName?: string;
  propertyAddress?: string;
}

export function ShoppingListGenerator({
  items,
  propertyName = "Property",
  propertyAddress,
}: ShoppingListGeneratorProps) {
  const [copied, setCopied] = useState(false);
  const [exportFormat, setExportFormat] = useState<
    "detailed" | "simple" | "categorized"
  >("categorized");

  // Group items by category
  const itemsByCategory = useMemo(() => {
    const grouped = items.reduce((acc, item) => {
      const category = item.category || "Other";
      if (!acc[category]) {
        acc[category] = [];
      }
      acc[category].push(item);
      return acc;
    }, {} as Record<string, ShoppingListItem[]>);

    // Sort categories and items within each category
    const sortedGrouped = Object.keys(grouped)
      .sort()
      .reduce((acc, category) => {
        acc[category] = grouped[category].sort((a, b) =>
          a.name.localeCompare(b.name)
        );
        return acc;
      }, {} as Record<string, ShoppingListItem[]>);

    return sortedGrouped;
  }, [items]);

  // Generate different formats
  const generateTextFormat = (
    format: "detailed" | "simple" | "categorized"
  ) => {
    const date = new Date().toLocaleDateString();
    const time = new Date().toLocaleTimeString();

    let text = `üõí SHOPPING LIST\n`;
    text += `üìÖ Generated: ${date} at ${time}\n`;
    text += `üè† Property: ${propertyName}\n`;
    if (propertyAddress) {
      text += `üìç Address: ${propertyAddress}\n`;
    }
    text += `üì¶ Total Items: ${items.length}\n`;
    text += `\n${"=".repeat(40)}\n\n`;

    if (format === "simple") {
      items.forEach((item, index) => {
        const urgency =
          item.status === "out"
            ? "üî¥ OUT - "
            : item.status === "low"
            ? "üü° LOW - "
            : "";
        text += `${index + 1}. ${urgency}${item.name}\n`;
      });
    } else if (format === "detailed") {
      items.forEach((item, index) => {
        const urgency =
          item.status === "out"
            ? "üî¥ OUT OF STOCK"
            : item.status === "low"
            ? "üü° LOW STOCK"
            : "";
        const unit = item.unit ? ` (${item.unit})` : "";
        text += `${index + 1}. ${item.name}${unit}\n`;
        text += `   Status: ${urgency}\n`;
        text += `   Category: ${item.category}\n\n`;
      });
    } else {
      // categorized
      Object.entries(itemsByCategory).forEach(([category, categoryItems]) => {
        text += `üìÇ ${category.toUpperCase()}\n`;
        text += `${"-".repeat(20)}\n`;

        categoryItems.forEach((item) => {
          const urgency =
            item.status === "out"
              ? "üî¥ OUT"
              : item.status === "low"
              ? "üü° LOW"
              : "";
          const unit = item.unit ? ` (${item.unit})` : "";
          text += `‚Ä¢ ${urgency} - ${item.name}${unit}\n`;
        });
        text += `\n`;
      });
    }

    text += `\n${"=".repeat(40)}\n`;
    text += `Generated by STIA Fresh Inventory Management\n`;
    text += `Visit: ${window.location.origin}\n`;

    return text;
  };

  const generateHTMLFormat = () => {
    const date = new Date().toLocaleDateString();
    const time = new Date().toLocaleTimeString();

    return `
    <div class="shopping-list-generator">
      <div class="header">
        <h1>üõí Shopping List</h1>
        <p>Generated on ${date} at ${time}</p>
      </div>
      
      <div class="property-info">
        <h3>üè† ${propertyName}</h3>
        ${propertyAddress ? `<p>üìç ${propertyAddress}</p>` : ""}
        <p>üì¶ Total Items: ${items.length}</p>
      </div>

      ${Object.entries(itemsByCategory)
        .map(
          ([category, categoryItems]) => `
        <div class="category">
          <div class="category-title">üìÇ ${category}</div>
          ${categoryItems
            .map((item) => {
              const urgencyClass =
                item.status === "out"
                  ? "urgent"
                  : item.status === "low"
                  ? "low"
                  : "";
              const urgencyLabel =
                item.status === "out"
                  ? "üî¥ OUT"
                  : item.status === "low"
                  ? "üü° LOW"
                  : "‚úÖ OK";
              const unit = item.unit ? ` (${item.unit})` : "";

              return `
                <div class="item">
                  <div>
                    <input type="checkbox" class="checkbox">
                    <span class="${urgencyClass}">${item.name}${unit}</span>
                  </div>
                  <div>
                    <strong class="${urgencyClass}">${urgencyLabel}</strong>
                  </div>
                </div>
              `;
            })
            .join("")}
        </div>
      `
        )
        .join("")}

      <div class="footer">
        <p>Generated by STIA Fresh Inventory Management</p>
        <p>${window.location.origin}</p>
      </div>
    </div>
    `;
  };

  const copyToClipboard = async () => {
    const text = generateTextFormat(exportFormat);
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Failed to copy: ", err);
    }
  };

  const downloadFile = (content: string, filename: string) => {
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(url);
  };

  const downloadHTML = () => {
    const html = generateHTMLFormat();
    downloadFile(
      html,
      `shopping-list-${propertyName.replace(/\s+/g, "-").toLowerCase()}-${
        new Date().toISOString().split("T")[0]
      }.html`
    );
  };

  const downloadText = () => {
    const text = generateTextFormat(exportFormat);
    downloadFile(
      text,
      `shopping-list-${propertyName.replace(/\s+/g, "-").toLowerCase()}-${
        new Date().toISOString().split("T")[0]
      }.txt`
    );
  };

  const printList = () => {
    const html = generateHTMLFormat();
    const printWindow = window.open("", "_blank");
    if (printWindow) {
      printWindow.document.write(html);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const shareViaEmail = () => {
    const text = generateTextFormat(exportFormat);
    const subject = `Shopping List for ${propertyName}`;
    const body = encodeURIComponent(text);
    window.open(`mailto:?subject=${subject}&body=${body}`);
  };

  const shareViaText = () => {
    const text = generateTextFormat("simple"); // Use simple format for SMS
    const body = encodeURIComponent(text);
    window.open(`sms:?body=${body}`);
  };

  if (items.length === 0) {
    return (
      <div className="text-center p-8">
        <div className="text-gray-500 mb-4">
          <ShoppingCart className="h-12 w-12 mx-auto mb-2" />
          <p>No items need restocking!</p>
          <p className="text-sm">All inventory levels look good.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="border-b pb-4">
        <h2 className="text-2xl font-bold flex items-center gap-2">
          üõí Shopping List
        </h2>
        <div className="text-sm text-gray-600 mt-2">
          <div className="flex items-center gap-4">
            <span className="flex items-center gap-1">
              <Calendar className="h-4 w-4" />
              {new Date().toLocaleDateString()}
            </span>
            <span className="flex items-center gap-1">
              <MapPin className="h-4 w-4" />
              {propertyName}
            </span>
          </div>
        </div>
      </div>

      {/* Format Selection */}
      <div className="flex gap-2 mb-4">
        <button
          onClick={() => setExportFormat("categorized")}
          className={`px-3 py-1 rounded text-sm ${
            exportFormat === "categorized"
              ? "bg-blue-500 text-white"
              : "bg-gray-200 text-gray-700"
          }`}
        >
          By Category
        </button>
        <button
          onClick={() => setExportFormat("detailed")}
          className={`px-3 py-1 rounded text-sm ${
            exportFormat === "detailed"
              ? "bg-blue-500 text-white"
              : "bg-gray-200 text-gray-700"
          }`}
        >
          Detailed
        </button>
        <button
          onClick={() => setExportFormat("simple")}
          className={`px-3 py-1 rounded text-sm ${
            exportFormat === "simple"
              ? "bg-blue-500 text-white"
              : "bg-gray-200 text-gray-700"
          }`}
        >
          Simple List
        </button>
      </div>

      {/* Action Buttons */}
      <div className="flex flex-wrap gap-2 p-4 bg-gray-50 rounded-lg">
        <button
          onClick={printList}
          className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
        >
          <Printer className="h-4 w-4" />
          Print
        </button>

        <button
          onClick={copyToClipboard}
          className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors"
        >
          {copied ? (
            <Check className="h-4 w-4" />
          ) : (
            <Copy className="h-4 w-4" />
          )}
          {copied ? "Copied!" : "Copy Text"}
        </button>

        <button
          onClick={shareViaEmail}
          className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition-colors"
        >
          <Mail className="h-4 w-4" />
          Email
        </button>

        <button
          onClick={shareViaText}
          className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors"
        >
          <MessageSquare className="h-4 w-4" />
          Text/SMS
        </button>

        <button
          onClick={downloadHTML}
          className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
        >
          <Download className="h-4 w-4" />
          Download HTML
        </button>

        <button
          onClick={downloadText}
          className="flex items-center gap-2 px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
        >
          <Download className="h-4 w-4" />
          Download Text
        </button>
      </div>

      {/* Preview */}
      <div className="border rounded-lg p-4 bg-white">
        <h3 className="font-semibold mb-3">Preview:</h3>
        <div className="bg-gray-50 p-4 rounded border font-mono text-sm whitespace-pre-wrap max-h-96 overflow-y-auto">
          {generateTextFormat(exportFormat)}
        </div>
      </div>
    </div>
  );
}
